// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/23/2021 02:53:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          project2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module project2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] dipswitch;
reg dipswitch8;
reg rst;
// wires                                               
wire blue1;
wire blue2;
wire blue3;
wire blue4;
wire green1;
wire green2;
wire green3;
wire green4;
wire led1;
wire led2;
wire led3;
wire led4;
wire led5;
wire led6;
wire led7;
wire led8;
wire pa;
wire player;
wire player1_rnd1_win;
wire player2_rnd1_win;
wire pr;
wire red1;
wire red2;
wire red3;
wire red4;
wire rnd1_done;
wire ro;
wire sci;

// assign statements (if any)                          
project2 i1 (
// port map - connection between master ports and signals/registers   
	.blue1(blue1),
	.blue2(blue2),
	.blue3(blue3),
	.blue4(blue4),
	.clk(clk),
	.dipswitch(dipswitch),
	.dipswitch8(dipswitch8),
	.green1(green1),
	.green2(green2),
	.green3(green3),
	.green4(green4),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.led4(led4),
	.led5(led5),
	.led6(led6),
	.led7(led7),
	.led8(led8),
	.pa(pa),
	.player(player),
	.player1_rnd1_win(player1_rnd1_win),
	.player2_rnd1_win(player2_rnd1_win),
	.pr(pr),
	.red1(red1),
	.red2(red2),
	.red3(red3),
	.red4(red4),
	.rnd1_done(rnd1_done),
	.ro(ro),
	.rst(rst),
	.sci(sci)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// dipswitch[ 2 ]
initial
begin
	dipswitch[2] = 1'b0;
end 
// dipswitch[ 1 ]
initial
begin
	dipswitch[1] = 1'b0;
end 
// dipswitch[ 0 ]
initial
begin
	dipswitch[0] = 1'b0;
	dipswitch[0] = #100000 1'b1;
	dipswitch[0] = #60000 1'b0;
	dipswitch[0] = #80000 1'b1;
	dipswitch[0] = #70000 1'b0;
end 

// dipswitch8
initial
begin
	dipswitch8 = 1'b0;
	dipswitch8 = #40000 1'b1;
end 

// rst
initial
begin
	rst = 1'b1;
end 
endmodule

