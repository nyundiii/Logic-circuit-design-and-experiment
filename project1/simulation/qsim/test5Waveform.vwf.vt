// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2021 18:19:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          test5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [11:0] Keypad;
reg pr;
reg rst;
// wires                                               
wire a;
wire b;
wire c;
wire com1;
wire com2;
wire com3;
wire com4;
wire com5;
wire com6;
wire com7;
wire com8;
wire d;
wire e;
wire f;
wire g;
wire [3:0] inputnum1;
wire [3:0] inputnum2;
wire [3:0] inputnum3;
wire [3:0] inputnum4;
wire led1;
wire led2;
wire led3;
wire led4;
wire led5;
wire led6;
wire led7;
wire led8;
wire player;
wire [3:0] rannum1;
wire [3:0] rannum2;
wire [3:0] rannum3;
wire [3:0] rannum4;

// assign statements (if any)                          
test5 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clk(clk),
	.com1(com1),
	.com2(com2),
	.com3(com3),
	.com4(com4),
	.com5(com5),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.inputnum1(inputnum1),
	.inputnum2(inputnum2),
	.inputnum3(inputnum3),
	.inputnum4(inputnum4),
	.Keypad(Keypad),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.led4(led4),
	.led5(led5),
	.led6(led6),
	.led7(led7),
	.led8(led8),
	.player(player),
	.pr(pr),
	.rannum1(rannum1),
	.rannum2(rannum2),
	.rannum3(rannum3),
	.rannum4(rannum4),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// Keypad[ 11 ]
initial
begin
	Keypad[11] = 1'b0;
	Keypad[11] = #600000 1'b1;
	Keypad[11] = #20000 1'b0;
	Keypad[11] = #320000 1'b1;
	Keypad[11] = #20000 1'b0;
end 
// Keypad[ 10 ]
initial
begin
	Keypad[10] = 1'b0;
end 
// Keypad[ 9 ]
initial
begin
	Keypad[9] = 1'b0;
end 
// Keypad[ 8 ]
initial
begin
	Keypad[8] = 1'b0;
end 
// Keypad[ 7 ]
initial
begin
	Keypad[7] = 1'b0;
end 
// Keypad[ 6 ]
initial
begin
	Keypad[6] = 1'b0;
	Keypad[6] = #300000 1'b1;
	Keypad[6] = #40000 1'b0;
end 
// Keypad[ 5 ]
initial
begin
	Keypad[5] = 1'b0;
	Keypad[5] = #740000 1'b1;
	Keypad[5] = #30000 1'b0;
end 
// Keypad[ 4 ]
initial
begin
	Keypad[4] = 1'b0;
	Keypad[4] = #180000 1'b1;
	Keypad[4] = #40000 1'b0;
end 
// Keypad[ 3 ]
initial
begin
	Keypad[3] = 1'b0;
	Keypad[3] = #480000 1'b1;
	Keypad[3] = #40000 1'b0;
	Keypad[3] = #150000 1'b1;
	Keypad[3] = #30000 1'b0;
end 
// Keypad[ 2 ]
initial
begin
	Keypad[2] = 1'b0;
	Keypad[2] = #880000 1'b1;
	Keypad[2] = #40000 1'b0;
end 
// Keypad[ 1 ]
initial
begin
	Keypad[1] = 1'b0;
	Keypad[1] = #40000 1'b1;
	Keypad[1] = #40000 1'b0;
	Keypad[1] = #720000 1'b1;
	Keypad[1] = #40000 1'b0;
end 
// Keypad[ 0 ]
initial
begin
	Keypad[0] = 1'b0;
	Keypad[0] = #380000 1'b1;
	Keypad[0] = #40000 1'b0;
end 

// pr
initial
begin
	pr = 1'b0;
	pr = #20000 1'b1;
end 

// rst
initial
begin
	rst = 1'b0;
end 
endmodule

