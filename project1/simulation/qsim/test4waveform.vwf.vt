// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2021 11:20:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          rnd2_player
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rnd2_player_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] Keypad;
reg rst;
reg sharp;
// wires                                               
wire player;
wire [3:0] player1_one;
wire [2:0] Player1_Point;
wire [3:0] player1_ten;
wire [3:0] player2_one;
wire [2:0] Player2_Point;
wire [3:0] player2_ten;

// assign statements (if any)                          
rnd2_player i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Keypad(Keypad),
	.player(player),
	.player1_one(player1_one),
	.Player1_Point(Player1_Point),
	.player1_ten(player1_ten),
	.player2_one(player2_one),
	.Player2_Point(Player2_Point),
	.player2_ten(player2_ten),
	.rst(rst),
	.sharp(sharp)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b1;
end 
endmodule

