// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2021 22:48:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          rnd123
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rnd123_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg dip_sw_6;
reg dip_sw_7;
reg dip_sw_8;
reg [2:0] dipswitch;
reg [11:0] Keypad;
reg rst;
// wires                                               
wire blue;
wire blue1;
wire blue2;
wire blue3;
wire blue4;
wire green;
wire green1;
wire green2;
wire green3;
wire green4;
wire paper;
wire psega;
wire psegb;
wire psegc;
wire psegd;
wire psege;
wire psegf;
wire psegg;
wire red;
wire red1;
wire red2;
wire red3;
wire red4;
wire rock;
wire rst_round1;
wire scr;

// assign statements (if any)                          
rnd123 i1 (
// port map - connection between master ports and signals/registers   
	.blue(blue),
	.blue1(blue1),
	.blue2(blue2),
	.blue3(blue3),
	.blue4(blue4),
	.clk(clk),
	.dip_sw_6(dip_sw_6),
	.dip_sw_7(dip_sw_7),
	.dip_sw_8(dip_sw_8),
	.dipswitch(dipswitch),
	.green(green),
	.green1(green1),
	.green2(green2),
	.green3(green3),
	.green4(green4),
	.Keypad(Keypad),
	.paper(paper),
	.psega(psega),
	.psegb(psegb),
	.psegc(psegc),
	.psegd(psegd),
	.psege(psege),
	.psegf(psegf),
	.psegg(psegg),
	.red(red),
	.red1(red1),
	.red2(red2),
	.red3(red3),
	.red4(red4),
	.rock(rock),
	.rst(rst),
	.rst_round1(rst_round1),
	.scr(scr)
);
initial 
begin 
#1000000 $finish;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// dipswitch[ 2 ]
initial
begin
	dipswitch[2] = 1'b0;
	dipswitch[2] = #390000 1'b1;
	dipswitch[2] = #40000 1'b0;
end 
// dipswitch[ 1 ]
initial
begin
	dipswitch[1] = 1'b0;
	dipswitch[1] = #520000 1'b1;
	dipswitch[1] = #20000 1'b0;
	dipswitch[1] = #300000 1'b1;
	dipswitch[1] = #40000 1'b0;
end 
// dipswitch[ 0 ]
initial
begin
	dipswitch[0] = 1'b0;
	dipswitch[0] = #100000 1'b1;
	dipswitch[0] = #110000 1'b0;
	dipswitch[0] = #70000 1'b1;
	dipswitch[0] = #50000 1'b0;
	dipswitch[0] = #270000 1'b1;
	dipswitch[0] = #50000 1'b0;
	dipswitch[0] = #70000 1'b1;
	dipswitch[0] = #50000 1'b0;
end 

// dip_sw_6
initial
begin
	dip_sw_6 = 1'b0;
end 

// dip_sw_7
initial
begin
	dip_sw_7 = 1'b0;
end 

// dip_sw_8
initial
begin
	dip_sw_8 = 1'b0;
end 
// Keypad[ 11 ]
initial
begin
	Keypad[11] = 1'b0;
end 
// Keypad[ 10 ]
initial
begin
	Keypad[10] = 1'b0;
end 
// Keypad[ 9 ]
initial
begin
	Keypad[9] = 1'b0;
end 
// Keypad[ 8 ]
initial
begin
	Keypad[8] = 1'b0;
end 
// Keypad[ 7 ]
initial
begin
	Keypad[7] = 1'b0;
end 
// Keypad[ 6 ]
initial
begin
	Keypad[6] = 1'b0;
end 
// Keypad[ 5 ]
initial
begin
	Keypad[5] = 1'b0;
end 
// Keypad[ 4 ]
initial
begin
	Keypad[4] = 1'b0;
end 
// Keypad[ 3 ]
initial
begin
	Keypad[3] = 1'b0;
end 
// Keypad[ 2 ]
initial
begin
	Keypad[2] = 1'b0;
end 
// Keypad[ 1 ]
initial
begin
	Keypad[1] = 1'b0;
end 
// Keypad[ 0 ]
initial
begin
	Keypad[0] = 1'b0;
end 
endmodule

