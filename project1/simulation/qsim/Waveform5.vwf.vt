// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2021 19:31:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          rnd2_player
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rnd2_player_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] Keypad;
reg rst;
reg sharp;
// wires                                               
wire a;
wire b;
wire BLUE1;
wire BLUE2;
wire BLUE3;
wire BLUE4;
wire c;
wire com1;
wire com2;
wire com3;
wire com4;
wire com5;
wire com6;
wire com7;
wire com8;
wire d;
wire e;
wire f;
wire g;
wire GREEN1;
wire GREEN2;
wire GREEN3;
wire GREEN4;
wire player;
wire [3:0] player1_led;
wire [3:0] player2_led;
wire RED1;
wire RED2;
wire RED3;
wire RED4;

// assign statements (if any)                          
rnd2_player i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.BLUE1(BLUE1),
	.BLUE2(BLUE2),
	.BLUE3(BLUE3),
	.BLUE4(BLUE4),
	.c(c),
	.clk(clk),
	.com1(com1),
	.com2(com2),
	.com3(com3),
	.com4(com4),
	.com5(com5),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.GREEN1(GREEN1),
	.GREEN2(GREEN2),
	.GREEN3(GREEN3),
	.GREEN4(GREEN4),
	.Keypad(Keypad),
	.player(player),
	.player1_led(player1_led),
	.player2_led(player2_led),
	.RED1(RED1),
	.RED2(RED2),
	.RED3(RED3),
	.RED4(RED4),
	.rst(rst),
	.sharp(sharp)
);
initial 
begin 
#1000000 $finish;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// sharp
initial
begin
	sharp = 1'b0;
	sharp = #360000 1'b1;
	sharp = #90000 1'b0;
	sharp = #370000 1'b1;
	sharp = #120000 1'b0;
end 
// Keypad[ 9 ]
initial
begin
	Keypad[9] = 1'b0;
end 
// Keypad[ 8 ]
initial
begin
	Keypad[8] = 1'b0;
	Keypad[8] = #70000 1'b1;
	Keypad[8] = #80000 1'b0;
end 
// Keypad[ 7 ]
initial
begin
	Keypad[7] = 1'b0;
	Keypad[7] = #230000 1'b1;
	Keypad[7] = #80000 1'b0;
end 
// Keypad[ 6 ]
initial
begin
	Keypad[6] = 1'b0;
end 
// Keypad[ 5 ]
initial
begin
	Keypad[5] = 1'b0;
end 
// Keypad[ 4 ]
initial
begin
	Keypad[4] = 1'b0;
end 
// Keypad[ 3 ]
initial
begin
	Keypad[3] = 1'b0;
	Keypad[3] = #520000 1'b1;
	Keypad[3] = #90000 1'b0;
end 
// Keypad[ 2 ]
initial
begin
	Keypad[2] = 1'b0;
	Keypad[2] = #700000 1'b1;
	Keypad[2] = #70000 1'b0;
end 
// Keypad[ 1 ]
initial
begin
	Keypad[1] = 1'b0;
end 
// Keypad[ 0 ]
initial
begin
	Keypad[0] = 1'b0;
end 
endmodule

